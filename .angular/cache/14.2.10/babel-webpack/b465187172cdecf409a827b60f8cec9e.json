{"ast":null,"code":"import { BehaviorSubject, catchError, tap, throwError } from \"rxjs\";\nimport { User } from \"./user.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst API_KEY = 'AIzaSyAm3_rXZRHMMUELexwCvvrcBiyfVC_OF_g ';\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.user = new BehaviorSubject(null);\n    }\n\n    signup(email, password) {\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' + API_KEY, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(resData => {\n        this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n      }));\n    }\n\n    login(email, password) {\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' + API_KEY, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(resData => {\n        this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n      }));\n    }\n\n    autoLogin() {\n      const userData = JSON.parse(localStorage.getItem('userData'));\n\n      if (!userData) {\n        return;\n      }\n\n      const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n\n      if (loadedUser.token) {\n        this.user.next(loadedUser);\n        const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n        this.autoLogout(expirationDuration);\n      }\n    }\n\n    logout() {\n      this.user.next(null);\n      this.router.navigate(['/auth']);\n      localStorage.removeItem('userData');\n\n      if (this.tokenExpirationTimer) {\n        clearTimeout(this.tokenExpirationTimer);\n      }\n\n      this.tokenExpirationTimer = null;\n    }\n\n    autoLogout(expirationDuration) {\n      this.tokenExpirationTimer = setTimeout(() => {\n        this.logout();\n      }, expirationDuration);\n    }\n\n    handleAuthentication(email, userId, token, expiresIn) {\n      const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n      const user = new User(email, userId, token, expirationDate);\n      this.user.next(user);\n      this.autoLogout(expiresIn * 1000);\n      localStorage.setItem('userData', JSON.stringify(user));\n    }\n\n    handleError(errorResponse) {\n      let errorMessage = 'An unknown error occurred!';\n\n      if (!errorResponse.error || !errorResponse.error.error) {\n        return throwError(() => new Error(errorMessage));\n      }\n\n      switch (errorResponse.error.error.message) {\n        case 'EMAIL_EXISTS':\n          errorMessage = 'This email exists already';\n          break;\n\n        case 'EMAIL_NOT_FOUND':\n          errorMessage = 'This email is not registered with an account';\n          break;\n\n        case 'INVALID_PASSWORD':\n          errorMessage = 'This password is not correct';\n          break;\n\n        default:\n          errorMessage = 'Default error message';\n      }\n\n      return throwError(() => new Error(errorMessage));\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}