{"ast":null,"code":"// import { Directive, HostBinding, HostListener } from \"@angular/core\";\n// @Directive({\n//     selector: '[appDropdown]'\n// })\n// export class DropdownDirective {\n//     @HostBinding('class.open') isOpen = false;\n//     @HostListener('click') toggleOpen(){\n//         this.isOpen = !this.isOpen;\n//     }\n// }\n// To create a dropdown that can also be closed by a click anywhere outside \n// (which also means that a click on one dropdown closes any other onemptied,\n// btw), replace the code dropdown.directive.ts with this (placing the \n//     listener not on the dropdown but on the document):\nimport { ElementRef } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport let DropdownDirective = /*#__PURE__*/(() => {\n  class DropdownDirective {\n    constructor(elRef) {\n      this.elRef = elRef;\n      this.isOpen = false;\n    }\n\n    toggleOpen(event) {\n      this.isOpen = this.elRef.nativeElement.contains(event.target) ? !this.isOpen : false;\n    }\n\n  }\n\n  DropdownDirective.ɵfac = function DropdownDirective_Factory(t) {\n    return new (t || DropdownDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  DropdownDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: DropdownDirective,\n    selectors: [[\"\", \"appDropdown\", \"\"]],\n    hostVars: 2,\n    hostBindings: function DropdownDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function DropdownDirective_click_HostBindingHandler($event) {\n          return ctx.toggleOpen($event);\n        }, false, i0.ɵɵresolveDocument);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"open\", ctx.isOpen);\n      }\n    }\n  });\n  return DropdownDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}